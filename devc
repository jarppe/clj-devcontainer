#!/usr/bin/env bb
(ns devc
  (:require [clojure.string :as str]
            [clojure.java.io :as io]
            [babashka.cli :as cli]
            [babashka.process :as p]
            [babashka.fs :as fs]))


;; Set to true, when *not* in repl
(def real? (= *file* (System/getProperty "babashka.file")))


(defn exit [exit-code]
  (if real?
    (System/exit exit-code)
    (println (str "(System/exit " exit-code ")"))))


(def user          (System/getenv "USER"))
(def labels        (str "app=devcontainer,user=" user))
(def default-image "jarppe/clj-devcontainer:latest")


(def cli-spec
  {:spec     {:help      {:desc  "Show usage"
                          :alias :h}
              :namespace {:desc  "Kube namespace (default = current namespace)"
                          :alias :n}
              :context   {:desc  "Kube context (default = current context)"
                          :alias :c}
              :image     {:desc   (str "Devcontainer image, used by \"up\" (default = " default-image ")")
                          :coerce :string
                          :alias  :i}}
   :error-fn (fn [_]
               (println "error: invalid command")
               (println "try: --help")
               (exit 1))})


(defn help [{spec :spec}]
  (println "usage: devc <command> <pod-name> <args>")
  (println "command:")
  (println "  up      Start devcontainer")
  (println "  down    Stop devcontainer")
  (println "  ps      List devcontainers")
  (println "  sh      Open shell in devcontainer pod")
  (println "pod-name:")
  (println "  Name of the devcontainer pod, defaults to" (pr-str user))
  (println "args:")
  (println (cli/format-opts spec)))


(defn kubectl [command args]
  (-> (apply p/process
             {:in  :inherit
              :out :inherit
              :err :inherit}
             "kubectl" command
             (mapcat (fn [arg]
                       (cond
                         (sequential? arg) arg
                         (some? arg) [arg]
                         :else []))
                     args))
      (deref)
      :exit
      (exit)))


(defn up [{:keys [opts args]}]
  (kubectl "run" [(or (first args) user)
                  (when-let [context (:context opts)] (str "--context=" context))
                  (when-let [namespace (:namespace opts)] (str "--namespace=" namespace))
                  (str "--image=" (or (:image opts) default-image))
                  (str "--labels=" labels)
                  "--restart=Never"
                  "--"
                  "sleep" "infinity"]))


(defn down [{:keys [opts args]}]
  (kubectl "delete" ["pod"
                     (or (first args)
                         "--selector=app=devcontainer")
                     (when-let [context (:context opts)] (str "--context=" context))
                     (when-let [namespace (:namespace opts)] (str "--namespace=" namespace))]))

  
(defn ps [{:keys [opts args]}]
  (kubectl "get" ["pod"
                  (or (first args)
                      "--selector=app=devcontainer")
                  (when-let [context (:context opts)] (str "--context=" context))
                  (when-let [namespace (:namespace opts)] (str "--namespace=" namespace))]))


(defn sh [{:keys [opts args]}]
  (let [podname (or (first args) user)
        args    (next args)]
    (kubectl "exec" [podname
                     (when-let [context (:context opts)] (str "--context=" context))
                     (when-let [namespace (:namespace opts)] (str "--namespace=" namespace))
                     (str "--container=" podname) ;; The kubectl run does not allow specifying container name
                     (when-not args ["--stdin" "--tty"])
                     "--"
                     (or args ["zsh" "-l"])])))


(def table
  [{:cmds ["up"]
    :fn   (fn [m] (assoc m :fn up))}
   {:cmds ["down"]
    :fn   (fn [m] (assoc m :fn down))}
   {:cmds ["ps"]
    :fn   (fn [m] (assoc m :fn ps))}
   {:cmds ["sh"]
    :fn   (fn [m] (assoc m :fn sh))}
   {:cmds []
    :fn   (fn [m] (assoc m :fn help))}])


(defn main [args]
  (let [opts (-> (cli/dispatch table args cli-spec)
                 (assoc :spec cli-spec))]
    (when (#{:h :help} opts)
      (help opts)
      (exit 0))
    (let [command (:fn opts)]
      (command opts))))


(when real?
  (main *command-line-args*))


(comment
  (up {})
  (ps {:opts {:all true}})
  (ps {})
  (down {})
  ;
  )