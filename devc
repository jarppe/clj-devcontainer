#!/usr/bin/env bb
(ns devc
  (:require [babashka.cli :as cli]
            [babashka.process :as p]))


;; Set to true, when *not* in repl
(def real? (= *file* (System/getProperty "babashka.file")))


(defn exit [exit-code]
  (if real?
    (System/exit exit-code)
    (println (str "(System/exit " exit-code ")"))))


(def user               (System/getenv "USER"))
(def labels             (str "app=devcontainer,user=" user))


(def default-opts {:context   (-> (p/shell {:out :string} "kubectl config view --minify -o jsonpath='{.contexts[0].name}'") :out)
                   :namespace (-> (p/shell {:out :string} "kubectl config view --minify -o jsonpath='{.contexts[0].context.namespace}'") :out)
                   :image     (or (System/getenv "CLJ_DEVCONTAINER_IMAGE")
                                  "jarppe/clj-devcontainer:latest")
                   :pod       (or (System/getenv "CLJ_DEVCONTAINER_POD_NAME")
                                  user)
                   :container (System/getenv "CLJ_DEVCONTAINER_CONTAINER_NAME")})

(def cli-spec
  {:spec     {:help      {:desc  "Show usage"
                          :alias :h}
              :context   {:desc    "Kube context (default from kubectl config)"
                          :alias   :ctx
                          :default (:context default-opts)}
              :namespace {:desc    "Kube namespace (default from kubectl config)"
                          :alias   :ns
                          :default (:namespace default-opts)}
              :pod       {:desc    "Devcontainer pod name ($CLJ_DEVCONTAINER_POD_NAME or username)"
                          :alias   :pod
                          :default (:pod default-opts)}
              :container {:desc    "Container name ($CLJ_DEVCONTAINER_CONTAINER_NAME or pod name)"
                          :alias   :c}
              :image     {:desc    "Devcontainer image ($CLJ_DEVCONTAINER_IMAGE or \"jarppe/clj-devcontainer:latest\")"
                          :coerce  :string
                          :alias   :i
                          :default (:image default-opts)}}
   :error-fn (fn [_]
               (println "error: invalid command")
               (println "try: --help")
               (exit 1))})


(defn help [{spec :spec}]
  (println "usage: devc <command> <pod-name> <args>")
  (println "command:")
  (println "  up      Start devcontainer")
  (println "  down    Stop devcontainer")
  (println "  ps      List devcontainers")
  (println "  sh      Open shell in devcontainer pod")
  (println "pod-name:")
  (println "  Name of the devcontainer pod, defaults to" (pr-str user))
  (println "args:")
  (println (cli/format-opts spec)))


(defn kubectl [command args]
  (-> (apply p/process
             {:in  :inherit
              :out :inherit
              :err :inherit}
             "kubectl" command
             (mapcat (fn [arg]
                       (cond
                         (sequential? arg) arg
                         (some? arg) [arg]
                         :else []))
                     args))
      (deref)
      :exit
      (exit)))


(defn up [{:keys [opts]}]
  (kubectl "run" [(:pod opts)
                  (str "--context=" (:context opts))
                  (str "--namespace=" (:namespace opts))
                  (str "--image=" (:image opts))
                  (str "--labels=" labels)
                  (str "--env=CONTEXT=" (:context opts))
                  (str "--env=NAMESPACE=" (:namespace opts))
                  (str "--env=POD_NAME=" (:pod opts))
                  "--restart=Never"
                  "--"
                  "sleep" "infinity"]))


(defn down [{:keys [opts args]}]
  (kubectl "delete" ["pod"
                     (or (first args)
                         (str "--selector=" labels))
                     (str "--context=" (:context opts))
                     (str "--namespace=" (:namespace opts))]))

  
(defn ps [{:keys [opts args]}]
  (kubectl "get" ["pod"
                  (or (first args)
                      (str "--selector=" labels))
                  (str "--context=" (:context opts))
                  (str "--namespace=" (:namespace opts))]))


(defn sh [{:keys [opts args]}] 
  (kubectl "exec" [(:pod opts)
                   (str "--context=" (:context opts))
                   (str "--namespace=" (:namespace opts))
                   (str "--container=" (or (:container opts) (:pod opts)))
                   (when-not args ["--stdin" "--tty"])
                   "--"
                   (or args ["zsh" "-l"])]))


(def table
  [{:cmds ["up"]
    :fn   (fn [m] (assoc m :fn up))}
   {:cmds ["down"]
    :fn   (fn [m] (assoc m :fn down))}
   {:cmds ["ps"]
    :fn   (fn [m] (assoc m :fn ps))}
   {:cmds ["sh"]
    :fn   (fn [m] (assoc m :fn sh))}
   {:cmds []
    :fn   (fn [m] (assoc m :fn help))}])


(defn main [args]
  (let [opts (-> (cli/dispatch table args cli-spec)
                 (assoc :spec cli-spec)
                 (update :opts (partial merge-with (fn [a _] a)) default-opts))]
    (when (#{:h :help} opts)
      (help opts)
      (exit 0))
    (let [command (:fn opts)]
      (command opts))))


(when real?
  (main *command-line-args*))


(comment
  (up {})
  (ps {:opts {:all true}})
  (ps {})
  (down {})
  ;
  )